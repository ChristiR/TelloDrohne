# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Tello-Drohne.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

from PyQt5.QtWidgets import QLabel

from Steuerung import *
from PyQt5 import QtCore, QtGui, QtWidgets
import multiprocessing as Process
streamon = False
ballcontrol = False

me = tello.Tello()
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        #Start Stream
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 90, 121, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.B1_on_click)

        #Einstellungen
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(20, 290, 121, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.B2_on_click)
        #Stop Stream
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(20, 140, 121, 41))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.B3_on_click)
        #Start Flight
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(20, 190, 121, 41))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.B4_on_click)
        #Stop Flight
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(20, 240, 121, 41))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.B5_on_click)
        #connect
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(20, 340, 121, 41))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.B6_on_click)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Start Stream"))
        self.pushButton_2.setText(_translate("MainWindow", "Einstellungen"))
        self.pushButton_3.setText(_translate("MainWindow", "Stop Stream"))
        self.pushButton_4.setText(_translate("MainWindow", "Start Flight"))
        self.pushButton_5.setText(_translate("MainWindow", "Stop Flight"))
        self.pushButton_6.setText(_translate("MainWindow", "Connect"))
    #StartStream
    def B1_on_click(self):
        print('B1 button click')
        global streamon
        streamon = True
        p1 = Process(target=stream())
        p1.start()
    #Einstellungen
    def B2_on_click(self):
        print('B2 button click')
    #StopStream
    def B3_on_click(self):
        print('B3 button click')
        global streamon
        streamon = False
    def B4_on_click(self):
        print('B4 button click')
        global ballcontrol
        ballcontrol = True
    def B5_on_click(self):
        print('B5 button click')
        global ballcontrol
        ballcontrol = False
    def B6_on_click(self):
        print('B6 button click')
        me.connect()
        me.set_video_fps('high')
        me.set_video_bitrate(5)
        me.set_video_resolution('low')
        print(me.get_battery())
        # me.connect_to_wifi()
        # time.sleep(20)
def trackball(me, center, radius):
    lr = 0
    vr = 0
    hr = 0
    speed = 0
    if center[0] > framecenter[0]:
        # ball rechts von mitte
        #print("RECHTS")
        # lr = 0
        # if center[0] > 350:
        #     lr = 10
        # if center[0] > 400:
        #     lr = 25
        # if center[0] > 450:
        #     lr = 35
        # if center[0] > 500:
        #     lr = 50
        # if center[0] > 550:
        #     lr = 75
        # if center[0] > 600:
        #     lr = 100
        lr1 = 0
        if center[0] > 350:
            lr1 = 10
        if center[0] > 400:
            lr1 = 25
        if center[0] > 450:
            lr1 = 35
        if center[0] > 500:
            lr1 = 50
        if center[0] > 550:
            lr1 = 75
        if center[0] > 600:
            lr1 = 100
        if lr1 != 0:
            me.rotate_clockwise(lr1)
    if center[0] < framecenter[0]:
        # ball links von mitte
        #print("LINKS")
        # lr = 0
        # if center[0] < 290:
        #     lr = -10
        # if center[0] < 240:
        #     lr = -25
        # if center[0] < 190:
        #     lr = -35
        # if center[0] < 140:
        #     lr = -50
        # if center[0] < 90:
        #     lr = -75
        # if center[0] < 40:
        #     lr = -100
        lr2 = 0
        if center[0] < 290:
            lr2 = 10
        if center[0] < 240:
            lr2 = 25
        if center[0] < 190:
            lr2 = 35
        if center[0] < 140:
            lr2 = 50
        if center[0] < 90:
            lr2 = 75
        if center[0] < 40:
            lr2 = 100
        if lr2 != 0:
            me.rotate_counter_clockwise()(lr2)
    if center[1] < framecenter[1]:
        # ball über mitte
        #print("RUNTER")
        hr=0
        if center[1] < 180:
            hr = 10
        if center[1] < 150:
            hr = 25
        if center[1] < 120:
            hr = 50
        if center[1] < 90:
            hr = 75
        if center[1] < 60:
            hr = 100
        me.send_rc_control(lr, vr, hr, speed)
    if center[1] > framecenter[1]:
        # ball unter mitte
        #print("HOCH")
        hr=0
        if center[1] > 300:
            hr = -10
        if center[1] > 330:
            hr = -25
        if center[1] > 360:
            hr = -50
        if center[1] > 390:
            hr = -75
        if center[1] > 420:
            hr = -100
        me.send_rc_control(lr, vr, hr, speed)
    if radius < (Abstandradius - (Abstandradius * abstandaccuracy)):
        # ball bewegt sich weg
        #print("VORWÄRTS")
        vr = 0#-10
    if radius > (Abstandradius + (Abstandradius * abstandaccuracy)):
        # ball bewegt sich auf drohne zu
        #print("RÜCKWÄRTS")
        vr = 0#10
    speed = 10

    #print("links/rechts: " + str(lr) + "  vorwärts/rückwärts: " + str(vr) + "  hoch/runter: " + str(
     #   hr) + "  speed: " + str(speed))
# def frameauswerten(frame, width, height, colorLower, colorUpper):
#     frame = imutils.resize(frame, width, height)
#     # blurred = cv2.GaussianBlur(frame, (11, 11), 0)
#     # cv2.imshow("Blurred", blurred)
#     hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
#     # cv2.imshow("hsv", hsv)
#     # create a mask for the color you want, then perform
#     # a series of dilations and erosions to remove any small
#     # blobs left in the mask
#     mask = cv2.inRange(hsv, colorLower, colorUpper)
#     mask = cv2.erode(mask, None, iterations=2)
#     mask = cv2.dilate(mask, None, iterations=2)
#     # cv2.imshow("mask", mask)
#     cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
#                             cv2.CHAIN_APPROX_SIMPLE)
#     cnts = imutils.grab_contours(cnts)
#     center = None
#     # only proceed if at least one contour was found
#     if len(cnts) > 0:
#         # find the largest contour in the mask, then use
#         # it to compute the minimum enclosing circle and
#         # centroid
#         c = max(cnts, key=cv2.contourArea)
#         ((x, y), radius) = cv2.minEnclosingCircle(c)
#         M = cv2.moments(c)
#         center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))
#         # print(center)
#         # only proceed if the radius meets a minimum size
#         if radius > 5:
#             # draw the circle and centroid on the frame
#             cv2.circle(frame, (int(x), int(y)), int(radius),
#                        (0, 255, 255), 2)
#             cv2.circle(frame, center, 5, (0, 0, 255), -1)
#         if ballcontrol:
#             trackball(me, center, radius)
#
#     else:
#         print("no ball")
#         me.send_rc_control(0, 0, 0, 0)
#     cv2.imshow("Frame", frame)
def stream():
    me.streamon()
    time.sleep(4)
    me.turn_motor_on()
    me.takeoff()
    me.send_rc_control(0, 0, -25, 0)
    time.sleep(2.2)
    #print(me.get_current_state())

    # Frame größe
    width = 640
    height = 480
    # einstellungen
    framecenter = (int(width // 2), int(height // 2))
    Abstandradius = 40
    abstandaccuracy = 0.3  # genauigkeit abstand
    accuracy = 0.3  # genauigkeit was noch mitte ist

    # Colorcode in HSV
    colorLower = (27, 80, 182)
    colorUpper = (31, 184, 255)

    n = 0

    while streamon:
        frame = me.get_frame_read().frame
        if frame is None:
            break
        #verteilen auf prozesse evtl? das jeder prozess kurz 1 frame bearbeitet?
        # n = n+1
        # if n==0:
        #     p2 = Process(target=frameauswerten, args=(frame, width, height, colorLower, colorUpper))
        #
        # if n==1:
        #     p3 = Process(target=frameauswerten, args=(frame, width, height, colorLower, colorUpper))
        #     p3.start()
        #     n=0
        # if n==2:
        #     p4 = Process(target=frameauswerten, args=(frame, width, height, colorLower, colorUpper))
        #     p4.start()
        # if n==3:
        #     p1 = Process(target=frameauswerten, args=(frame, width, height, colorLower, colorUpper))
        #     p1.start()
        #     n = 0

        # print(me.get_current_state())

        # resize the frame, blur it, and convert it to the HSV
        # color space
        frame = imutils.resize(frame, width, height)
        # blurred = cv2.GaussianBlur(frame, (11, 11), 0)
        # cv2.imshow("Blurred", blurred)
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        # cv2.imshow("hsv", hsv)
        # create a mask for the color you want, then perform
        # a series of dilations and erosions to remove any small
        # blobs left in the mask
        mask = cv2.inRange(hsv, colorLower, colorUpper)
        mask = cv2.erode(mask, None, iterations=2)
        mask = cv2.dilate(mask, None, iterations=2)
        # cv2.imshow("mask", mask)
        cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
                                cv2.CHAIN_APPROX_SIMPLE)
        cnts = imutils.grab_contours(cnts)
        center = None
        # only proceed if at least one contour was found
        if len(cnts) > 0:
            # find the largest contour in the mask, then use
            # it to compute the minimum enclosing circle and
            # centroid
            c = max(cnts, key=cv2.contourArea)
            ((x, y), radius) = cv2.minEnclosingCircle(c)
            M = cv2.moments(c)
            center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))
            # print(center)
            # only proceed if the radius meets a minimum size
            if radius > 5:
                # draw the circle and centroid on the frame
                cv2.circle(frame, (int(x), int(y)), int(radius),
                           (0, 255, 255), 2)
                cv2.circle(frame, center, 5, (0, 0, 255), -1)
            trackball(me, center, radius)
            print(radius)
            #if ballcontrol:
                #trackball(me, center, radius)

        else:
            print("no ball")
            me.send_rc_control(0, 0, 0, 0)

        cv2.circle(frame,framecenter,5, (255, 0, 255), -1)
        cv2.imshow("Frame", frame)
        key = cv2.waitKey(1) & 0xFF
        # if the 'q' key is pressed, stop the loop
        if key == ord("q"):
            break

    cv2.destroyWindow("Frame")
    print("geschlossen")
    me.land()
    me.end()
    me.turn_motor_off()
    me.streamoff()
    #fehler das nach buttonclick nicht weiter geht
    #cv2.destroyAllWindows()

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(window)
    window.show()
    sys.exit(app.exec_())
